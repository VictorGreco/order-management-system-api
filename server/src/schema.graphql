input InputEmployee {
	id: ID!
	name: String
}

enum OrderState {
	OPEN
	IN_PROGRESS
	COMPLETE
}

interface Node {
	id: ID!
}

type Query {
	order(id: ID!): Order
}

type Mutation {
	updateSingleOrderStateAndEmployee(id: ID!, state: OrderState!, employee: InputEmployee): Order
}

type Order implements Node {
	id: ID!
	state: OrderState
	customer: Customer
	employee: Employee
	items: [Item]
	createdAt: String
	lastUpdated: String
}

type Customer implements Node {
	id: ID!
	name: String
}

type Employee implements Node {
	id: ID!
	name: String
}

type Item implements Node {
	id: ID!
	name: String
	price: Int
	quantity: Int
}